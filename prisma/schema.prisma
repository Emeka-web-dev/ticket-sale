// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model TwoFactorComfirmation {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model User {
  id                    String                 @id @default(uuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  password              String?
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorComfirmation?
  role                  UserRole               @default(USER)
  tickets               Ticket[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

model Ticket {
  id           String @id @default(uuid())
  ticketNumber String @unique
  userId       String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  distance           Float
  leavingFrom        String
  goingTo            String
  startDate          DateTime
  endDate            DateTime?
  isRoundTrip        Boolean
  price              Float
  status             TicketStatus
  numberOfPassengers Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TicketStatus {
  PAID
  CANCELLED
}
